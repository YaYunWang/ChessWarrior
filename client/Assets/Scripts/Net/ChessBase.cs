/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Chess : ChessBase)
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;

	// defined in */scripts/entity_defs/Chess.def
	// Please inherit and implement "class Chess : ChessBase"
	public abstract class ChessBase : Entity
	{
		public EntityBaseEntityCall_ChessBase baseEntityCall = null;
		public EntityCellEntityCall_ChessBase cellEntityCall = null;

		public UInt64 chess_attack = 0;
		public virtual void onChess_attackChanged(UInt64 oldValue) {}
		public UInt64 chess_defense = 0;
		public virtual void onChess_defenseChanged(UInt64 oldValue) {}
		public UInt64 chess_id = 0;
		public virtual void onChess_idChanged(UInt64 oldValue) {}
		public UInt64 chess_index_x = 0;
		public virtual void onChess_index_xChanged(UInt64 oldValue) {}
		public UInt64 chess_index_z = 0;
		public virtual void onChess_index_zChanged(UInt64 oldValue) {}
		public UInt64 chess_level = 0;
		public virtual void onChess_levelChanged(UInt64 oldValue) {}
		public string chess_name = "";
		public virtual void onChess_nameChanged(string oldValue) {}


		public ChessBase()
		{
		}

		public override void onGetBase()
		{
			baseEntityCall = new EntityBaseEntityCall_ChessBase(id, className);
		}

		public override void onGetCell()
		{
			cellEntityCall = new EntityCellEntityCall_ChessBase(id, className);
		}

		public override void onLoseCell()
		{
			cellEntityCall = null;
		}

		public override EntityCall getBaseEntityCall()
		{
			return baseEntityCall;
		}

		public override EntityCall getCellEntityCall()
		{
			return cellEntityCall;
		}

		public override void onRemoteMethodCall(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Chess"];

			UInt16 methodUtype = 0;
			UInt16 componentPropertyUType = 0;

			if(sm.useMethodDescrAlias)
			{
				componentPropertyUType = stream.readUint8();
				methodUtype = stream.readUint8();
			}
			else
			{
				componentPropertyUType = stream.readUint16();
				methodUtype = stream.readUint16();
			}

			Method method = null;

			if(componentPropertyUType == 0)
			{
				method = sm.idmethods[methodUtype];
			}
			else
			{
				Property pComponentPropertyDescription = sm.idpropertys[componentPropertyUType];
				switch(pComponentPropertyDescription.properUtype)
				{
					default:
						break;
				}

				return;
			}

			switch(method.methodUtype)
			{
				default:
					break;
			};
		}

		public override void onUpdatePropertys(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Chess"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			while(stream.length() > 0)
			{
				UInt16 _t_utype = 0;
				UInt16 _t_child_utype = 0;

				{
					if(sm.usePropertyDescrAlias)
					{
						_t_utype = stream.readUint8();
						_t_child_utype = stream.readUint8();
					}
					else
					{
						_t_utype = stream.readUint16();
						_t_child_utype = stream.readUint16();
					}
				}

				Property prop = null;

				if(_t_utype == 0)
				{
					prop = pdatas[_t_child_utype];
				}
				else
				{
					Property pComponentPropertyDescription = pdatas[_t_utype];
					switch(pComponentPropertyDescription.properUtype)
					{
						default:
							break;
					}

					return;
				}

				switch(prop.properUtype)
				{
					case 10:
						UInt64 oldval_chess_attack = chess_attack;
						chess_attack = stream.readUint64();

						if(prop.isBase())
						{
							if(inited)
								onChess_attackChanged(oldval_chess_attack);
						}
						else
						{
							if(inWorld)
								onChess_attackChanged(oldval_chess_attack);
						}

						break;
					case 11:
						UInt64 oldval_chess_defense = chess_defense;
						chess_defense = stream.readUint64();

						if(prop.isBase())
						{
							if(inited)
								onChess_defenseChanged(oldval_chess_defense);
						}
						else
						{
							if(inWorld)
								onChess_defenseChanged(oldval_chess_defense);
						}

						break;
					case 5:
						UInt64 oldval_chess_id = chess_id;
						chess_id = stream.readUint64();

						if(prop.isBase())
						{
							if(inited)
								onChess_idChanged(oldval_chess_id);
						}
						else
						{
							if(inWorld)
								onChess_idChanged(oldval_chess_id);
						}

						break;
					case 8:
						UInt64 oldval_chess_index_x = chess_index_x;
						chess_index_x = stream.readUint64();

						if(prop.isBase())
						{
							if(inited)
								onChess_index_xChanged(oldval_chess_index_x);
						}
						else
						{
							if(inWorld)
								onChess_index_xChanged(oldval_chess_index_x);
						}

						break;
					case 9:
						UInt64 oldval_chess_index_z = chess_index_z;
						chess_index_z = stream.readUint64();

						if(prop.isBase())
						{
							if(inited)
								onChess_index_zChanged(oldval_chess_index_z);
						}
						else
						{
							if(inWorld)
								onChess_index_zChanged(oldval_chess_index_z);
						}

						break;
					case 6:
						UInt64 oldval_chess_level = chess_level;
						chess_level = stream.readUint64();

						if(prop.isBase())
						{
							if(inited)
								onChess_levelChanged(oldval_chess_level);
						}
						else
						{
							if(inWorld)
								onChess_levelChanged(oldval_chess_level);
						}

						break;
					case 7:
						string oldval_chess_name = chess_name;
						chess_name = stream.readUnicode();

						if(prop.isBase())
						{
							if(inited)
								onChess_nameChanged(oldval_chess_name);
						}
						else
						{
							if(inWorld)
								onChess_nameChanged(oldval_chess_name);
						}

						break;
					case 40001:
						Vector3 oldval_direction = direction;
						direction = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onDirectionChanged(oldval_direction);
						}
						else
						{
							if(inWorld)
								onDirectionChanged(oldval_direction);
						}

						break;
					case 40000:
						Vector3 oldval_position = position;
						position = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onPositionChanged(oldval_position);
						}
						else
						{
							if(inWorld)
								onPositionChanged(oldval_position);
						}

						break;
					case 40002:
						stream.readUint32();
						break;
					default:
						break;
				};
			}
		}

		public override void callPropertysSetMethods()
		{
			ScriptModule sm = EntityDef.moduledefs["Chess"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			UInt64 oldval_chess_attack = chess_attack;
			Property prop_chess_attack = pdatas[4];
			if(prop_chess_attack.isBase())
			{
				if(inited && !inWorld)
					onChess_attackChanged(oldval_chess_attack);
			}
			else
			{
				if(inWorld)
				{
					if(prop_chess_attack.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onChess_attackChanged(oldval_chess_attack);
					}
				}
			}

			UInt64 oldval_chess_defense = chess_defense;
			Property prop_chess_defense = pdatas[5];
			if(prop_chess_defense.isBase())
			{
				if(inited && !inWorld)
					onChess_defenseChanged(oldval_chess_defense);
			}
			else
			{
				if(inWorld)
				{
					if(prop_chess_defense.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onChess_defenseChanged(oldval_chess_defense);
					}
				}
			}

			UInt64 oldval_chess_id = chess_id;
			Property prop_chess_id = pdatas[6];
			if(prop_chess_id.isBase())
			{
				if(inited && !inWorld)
					onChess_idChanged(oldval_chess_id);
			}
			else
			{
				if(inWorld)
				{
					if(prop_chess_id.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onChess_idChanged(oldval_chess_id);
					}
				}
			}

			UInt64 oldval_chess_index_x = chess_index_x;
			Property prop_chess_index_x = pdatas[7];
			if(prop_chess_index_x.isBase())
			{
				if(inited && !inWorld)
					onChess_index_xChanged(oldval_chess_index_x);
			}
			else
			{
				if(inWorld)
				{
					if(prop_chess_index_x.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onChess_index_xChanged(oldval_chess_index_x);
					}
				}
			}

			UInt64 oldval_chess_index_z = chess_index_z;
			Property prop_chess_index_z = pdatas[8];
			if(prop_chess_index_z.isBase())
			{
				if(inited && !inWorld)
					onChess_index_zChanged(oldval_chess_index_z);
			}
			else
			{
				if(inWorld)
				{
					if(prop_chess_index_z.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onChess_index_zChanged(oldval_chess_index_z);
					}
				}
			}

			UInt64 oldval_chess_level = chess_level;
			Property prop_chess_level = pdatas[9];
			if(prop_chess_level.isBase())
			{
				if(inited && !inWorld)
					onChess_levelChanged(oldval_chess_level);
			}
			else
			{
				if(inWorld)
				{
					if(prop_chess_level.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onChess_levelChanged(oldval_chess_level);
					}
				}
			}

			string oldval_chess_name = chess_name;
			Property prop_chess_name = pdatas[10];
			if(prop_chess_name.isBase())
			{
				if(inited && !inWorld)
					onChess_nameChanged(oldval_chess_name);
			}
			else
			{
				if(inWorld)
				{
					if(prop_chess_name.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onChess_nameChanged(oldval_chess_name);
					}
				}
			}

			Vector3 oldval_direction = direction;
			Property prop_direction = pdatas[2];
			if(prop_direction.isBase())
			{
				if(inited && !inWorld)
					onDirectionChanged(oldval_direction);
			}
			else
			{
				if(inWorld)
				{
					if(prop_direction.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDirectionChanged(oldval_direction);
					}
				}
			}

			Vector3 oldval_position = position;
			Property prop_position = pdatas[1];
			if(prop_position.isBase())
			{
				if(inited && !inWorld)
					onPositionChanged(oldval_position);
			}
			else
			{
				if(inWorld)
				{
					if(prop_position.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPositionChanged(oldval_position);
					}
				}
			}

		}
	}
}